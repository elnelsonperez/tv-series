{"version":3,"sources":["features/tv/tv-list/components/tv-list-component/TvListComponent.module.scss","features/movie/movie-list/components/movies-list-component/MovieListComponent.module.scss","shared/components/genre-list/GenreList.module.scss","features/tv/models.ts","features/movie/models.ts","features/tv/actions.ts","features/tv/tv-top/reducer.ts","features/tv/tv-popular/reducer.ts","features/tv/tv-on-air/reducer.ts","features/tv/tv-airing/reducer.ts","features/movie/actions.ts","features/movie/movie-popular/reducer.ts","features/movie/movie-top-rated/reducer.ts","features/movie/movie-now-playing/reducer.ts","features/movie/movie-upcoming/reducer.ts","features/configuration/actions.ts","features/configuration/reducer.ts","features/genres/actions.ts","store/helpers.ts","features/genres/reducer.ts","store/root-reducer.ts","services/logger-service.ts","services/http-client.ts","shared/api/enums.ts","shared/api/generic-list-api.ts","features/tv/tv-list/api.ts","features/movie/movie-list/api.ts","features/configuration/api.ts","features/genres/api.ts","services/index.ts","features/tv/epics.ts","features/movie/epics.ts","features/configuration/epics.ts","features/genres/epics.ts","store/root-epic.ts","store/index.ts","router-paths.ts","layouts/Main.tsx","routes/Home.tsx","shared/hooks/config-context.ts","shared/components/PosterImage.tsx","shared/hooks/use-store-selector.ts","shared/components/genre-list/GenreList.tsx","features/tv/components/tv-card/TvShowCard.tsx","features/tv/tv-list/components/tv-list-component/TvListComponent.tsx","features/tv/tv-details/components/TvShowDetailComponent.tsx","features/tv/tv-details/api.ts","features/tv/tv-similar/api.ts","routes/TvDetail.tsx","features/movie/movie-details/components/MovieDetailComponent.tsx","features/movie/movie-details/api.ts","routes/MovieDetail.tsx","features/tv/components/GenericConnectedTvList.tsx","shared/hooks/use-obs-render.ts","features/search/components/GenericSearchComponent.tsx","shared/hooks/use-event-as-observable.ts","features/search/api.ts","features/search/components/TvSearchComponent.tsx","routes/TvShows.tsx","features/movie/components/movie-card/MovieCard.tsx","features/movie/movie-list/components/movies-list-component/MovieListComponent.tsx","features/search/components/MovieSearchComponent.tsx","features/movie/components/GenericConnectedMovieList.tsx","routes/Movies.tsx","App.tsx","index.tsx","features/tv/components/tv-card/TvShowCard.module.scss","features/movie/components/movie-card/MovieCard.module.scss"],"names":["module","exports","item","wrapper","genres","TvListType","MovieListType","fetchTopTvAction","createAsyncAction","fetchPopularTvAction","fetchOnAirTvAction","fetchAiringTodayTvAction","reducer","combineReducers","isLoading","createReducer","handleAction","request","state","action","failure","success","data","payload","fetchNowPlayingMoviesAction","fetchTopRatedMoviesAction","fetchUpcomingMoviesAction","fetchPopularMoviesAction","fetchConfigurationAction","fetchTvGenresAction","fetchMovieGenresAction","convertToEntityState","newData","key","arguments","length","undefined","newDataById","keyBy","mergedById","merge","byId","allIds","keys","map","i","parseInt","tvReducer","isTvLoading","isMoviesLoading","tv","movies","rootReducer","history","_combineReducers","_combineReducers2","router","connectRouter","configuration","Object","defineProperty","TOP_RATED","tvTop","POPULAR","tvPopular","ON_THE_AIR","tvOnAir","AIRING_TODAY","tvAiring","moviesPopular","moviesTopRated","UPCOMING","moviesUpcoming","NOW_PLAYING","moviesNowPlaying","logger_service","log","console","instance","Axios","create","baseURL","process","defaults","params","ResourceEndpoint","PosterSizes","getList","resourceType","listType","page","http","get","pipe","result","results","getTvList","TV","getTopTvShows","getMovieList","MOVIES","loadConfiguration","getGenres","type","src_services","logger","api","topTv","genericTvEpicFactory","actionBuilder","action$","state$","_ref","filter","isActionOf","switchMap","catchError","error","of","response","topTvEpic","services","popularTvEpic","onTheAirTvEpic","airingTvEpic","genericMovieEpicFactory","popularMoviesEpic","topRatedMoviesEpic","nowPlayingMoviesEpic","UpcomingMoviesEpic","loadConfigurationEpic","fetchTvGenresEpic","fetchMovieGenresEpic","_ref2","combineEpics","apply","toConsumableArray","values","concat","epicMiddleware","createEpicMiddleware","dependencies","createBrowserHistory","middlewares","routerMiddleware","enhancer","composeWithDevTools","applyMiddleware","store","createStore","run","rootEpic","pathsMap","home","tvShows","tvShowDetail","tvShowId","movieDetail","movieId","getPath","route","pathCb","_len","Array","_key","Main","children","react_default","a","createElement","className","navbar","Group","align","Alignment","LEFT","Heading","Divider","react_router_dom","style","textDecoration","color","to","buttons","icon","text","Home","src_layouts_Main","textAlign","display","flexDirection","justifyContent","height","marginBottom","intent","marginRight","href","ConfigContext","React","createContext","PosterImage","props","size","SMALL","entityWithPoster","poster_path","react","src","baseUrl","alt","useStoreSelector","selector","equalityFn","useSelector","GenreList","styles","overflowList","items","collapseFrom","Boundary","END","visibleItemRenderer","g","tag","id","name","overflowRenderer","popover","interactionKind","PopoverInteractionKind","HOVER","interactive","fontWeight","padding","t","widths","_widths","MEDIUM","TvShowCardWithRouter","withRouter","tvShow","posterSize","config","useContext","genresById","genre_ids","images","card","elevation","Elevation","TWO","width","cardBody","image","onClick","push","toString","components_PosterImage","base_url","title","rating","vote_average","genre_list_GenreList","TvListComponent","tvShowsList","tvList","index","TvShowDetailsComponent","_useState","useState","_useState2","slicedToArray","details","setDetails","_useState3","_useState4","similar","setSimilar","_useState5","_useState6","loadingDetails","setLoadingDetails","_useState7","_useState8","loadingSimilar","setLoadignSimilar","useEffect","tap","finalize","subscribe","tvId","fetchSimilarTv","detailRender","isEmpty","spinner","lib","animationIn","animationOut","isVisible","overview","seasons","season","TvListComponent_TvListComponent","slice","TvDetail","TvShowDetailComponent_TvShowDetailsComponent","match","MovieDetailComponent","budget","revenue","MovieDetail","MovieDetailComponent_MovieDetailComponent","GenericConnectedTvList","quantity","tvListType","loading","dispatch","useDispatch","tvActions","useObsRender","obs","defaultVal","value","setValue","subscription","unsubscribe","GenericSearchComponent","_useEventAsObs","initialValue","emitterRef","useRef","BehaviorSubject","obsRef","current","asObservable","next","useEventAsObs","_useEventAsObs2","searchTextCallback","searchTextObs$","list$","debounceTime","query","getSearchResults","endpoint","publishReplay","refCount","count","l","inputGroup","leftIcon","placeholder","onInput","e","target","marginTop","TvSearchCompontent","GenericSearchComponent_GenericSearchComponent","TvShows","TvSearchComponent_TvSearchCompontent","GenericConnectedTvList_GenericConnectedTvList","MovieCard_widths","MovieCardWithRouter","movie","MovieListComponent","movieList","MovieSearchComponent","MovieListComponent_MovieListComponent","GenericConnectedMovieList","movieListType","movieActions","Movies","components_MovieSearchComponent","components_GenericConnectedMovieList","AppWithConfig","Provider","react_router","exact","path","render","routes_TvDetail","routes_MovieDetail","App","es","esm","App_AppWithConfig","ReactDOM","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.bd273953.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"TvListComponent_item__3Vpx4\",\"wrapper\":\"TvListComponent_wrapper__3Sw5-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"MovieListComponent_item__2FQ0v\",\"wrapper\":\"MovieListComponent_wrapper__3y0Yy\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"genres\":\"GenreList_genres__3TsW3\"};","import {HasPosterPath, ProductionCompany} from \"../../shared/models\";\nimport {Genre} from \"../genres/models\";\n\nexport enum TvListType {\n    TOP_RATED = 'top_rated',\n    POPULAR = 'popular',\n    ON_THE_AIR = 'on_the_air',\n    AIRING_TODAY = 'airing_today'\n}\n\nexport interface TvListObject extends HasPosterPath {\n    original_name: string;\n    genre_ids: number[];\n    name: string;\n    popularity: number;\n    origin_country: string[];\n    vote_count: number;\n    first_air_date: string;\n    backdrop_path: string;\n    original_language: string;\n    id: number;\n    vote_average: number;\n    overview: string;\n}\n\ninterface CreatedBy {\n    id: number;\n    credit_id: string;\n    name: string;\n    gender: number;\n    profile_path: string;\n}\n\ninterface LastEpisodeToAir {\n    air_date: string;\n    episode_number: number;\n    id: number;\n    name: string;\n    overview: string;\n    production_code: string;\n    season_number: number;\n    show_id: number;\n    still_path: string;\n    vote_average: number;\n    vote_count: number;\n}\n\ninterface Network {\n    name: string;\n    id: number;\n    logo_path: string;\n    origin_country: string;\n}\n\ninterface Season extends HasPosterPath {\n    air_date: string;\n    episode_count: number;\n    id: number;\n    name: string;\n    overview: string;\n    season_number: number;\n}\n\nexport interface TvDetailObject extends HasPosterPath {\n    backdrop_path: string;\n    created_by: CreatedBy[];\n    episode_run_time: number[];\n    first_air_date: string;\n    genres: Genre[];\n    homepage: string;\n    id: number;\n    in_production: boolean;\n    languages: string[];\n    last_air_date: string;\n    last_episode_to_air: LastEpisodeToAir;\n    name: string;\n    next_episode_to_air?: any;\n    networks: Network[];\n    number_of_episodes: number;\n    number_of_seasons: number;\n    origin_country: string[];\n    original_language: string;\n    original_name: string;\n    overview: string;\n    popularity: number;\n    production_companies: ProductionCompany[];\n    seasons: Season[];\n    status: string;\n    type: string;\n    vote_average: number;\n    vote_count: number;\n}\n","import {HasPosterPath, ProductionCompany} from \"../../shared/models\";\nimport {Genre} from \"../genres/models\";\n\nexport interface MovieListObject extends HasPosterPath {\n    adult: boolean;\n    overview: string;\n    release_date: string;\n    genre_ids: number[];\n    id: number;\n    original_title: string;\n    original_language: string;\n    title: string;\n    backdrop_path: string;\n    popularity: number;\n    vote_count: number;\n    video: boolean;\n    vote_average: number;\n}\n\nexport interface ProductionCountry {\n    iso_3166_1: string;\n    name: string;\n}\n\nexport interface SpokenLanguage {\n    iso_639_1: string;\n    name: string;\n}\n\nexport interface MovieDetailObject extends HasPosterPath {\n    adult: boolean;\n    backdrop_path: string;\n    belongs_to_collection?: boolean;\n    budget: number;\n    genres: Genre[];\n    homepage: string;\n    id: number;\n    imdb_id: string;\n    original_language: string;\n    original_title: string;\n    overview: string;\n    popularity: number;\n    production_companies: ProductionCompany[];\n    production_countries: ProductionCountry[];\n    release_date: string;\n    revenue: number;\n    runtime: number;\n    spoken_languages: SpokenLanguage[];\n    status: string;\n    tagline: string;\n    title: string;\n    video: boolean;\n    vote_average: number;\n    vote_count: number;\n}\n\n\nexport enum MovieListType {\n    TOP_RATED = 'top_rated',\n    UPCOMING = 'upcoming',\n    NOW_PLAYING = 'now_playing',\n    POPULAR = 'popular',\n}\n\n\n","import { createAsyncAction } from 'typesafe-actions';\nimport {AxiosResponse} from \"axios\";\nimport {ApiError} from \"../../shared/api/models\";\nimport {TvListObject} from \"./models\";\n\nexport const fetchTopTvAction = createAsyncAction(\n    `[Top Tv] Request`,\n    `[Top Tv] Request Success`,\n    `[Top Tv] Request Failure`\n)<undefined, TvListObject[], AxiosResponse<ApiError>>();\n\nexport const fetchPopularTvAction = createAsyncAction(\n    `[Popular Tv] Request`,\n    `[Popular Tv] Request Success`,\n    `[Popular Tv] Request Failure`\n)<undefined, TvListObject[], AxiosResponse<ApiError>>();\n\nexport const fetchOnAirTvAction = createAsyncAction(\n    `[On Air Tv] Request`,\n    `[On Air Tv] Request Success`,\n    `[On Air Tv] Request Failure`\n)<undefined, TvListObject[], AxiosResponse<ApiError>>();\n\nexport const fetchAiringTodayTvAction = createAsyncAction(\n    `[Airing Today Tv] Request`,\n    `[Airing Today Tv] Request Success`,\n    `[Airing Today Tv] Request Failure`\n)<undefined, TvListObject[], AxiosResponse<ApiError>>();\n\nexport type FetchTvType = typeof fetchTopTvAction | typeof fetchPopularTvAction | typeof fetchOnAirTvAction | typeof fetchAiringTodayTvAction;\n","\nimport {combineReducers} from \"redux\";\nimport {createReducer} from \"typesafe-actions\";\nimport {TvListObject} from \"../models\";\nimport {fetchTopTvAction} from \"../actions\";\n\nconst reducer = combineReducers({\n    isLoading: createReducer(false as boolean)\n        .handleAction(fetchTopTvAction.request, (state, action) => true)\n        .handleAction([fetchTopTvAction.failure, fetchTopTvAction.success], (state, action) => false),\n    data: createReducer([] as TvListObject[])\n        .handleAction(fetchTopTvAction.success, (state, action) => action.payload)\n});\n\nexport default reducer;\n","\nimport {combineReducers} from \"redux\";\nimport {createReducer} from \"typesafe-actions\";\nimport {TvListObject} from \"../models\";\nimport {fetchPopularTvAction} from \"../actions\";\n\nconst reducer = combineReducers({\n    isLoading: createReducer(false as boolean)\n        .handleAction(fetchPopularTvAction.request, (state, action) => true)\n        .handleAction([fetchPopularTvAction.failure, fetchPopularTvAction.success], (state, action) => false),\n    data: createReducer([] as TvListObject[])\n        .handleAction(fetchPopularTvAction.success, (state, action) => action.payload)\n});\n\nexport default reducer;\n","\nimport {combineReducers} from \"redux\";\nimport {createReducer} from \"typesafe-actions\";\nimport {TvListObject} from \"../models\";\nimport {fetchOnAirTvAction} from \"../actions\";\n\nconst reducer = combineReducers({\n    isLoading: createReducer(false as boolean)\n        .handleAction(fetchOnAirTvAction.request, (state, action) => true)\n        .handleAction([fetchOnAirTvAction.failure, fetchOnAirTvAction.success], (state, action) => false),\n    data: createReducer([] as TvListObject[])\n        .handleAction(fetchOnAirTvAction.success, (state, action) => action.payload)\n});\n\nexport default reducer;\n","\nimport {combineReducers} from \"redux\";\nimport {createReducer} from \"typesafe-actions\";\nimport {TvListObject} from \"../models\";\nimport {fetchAiringTodayTvAction} from \"../actions\";\n\nconst reducer = combineReducers({\n    isLoading: createReducer(false as boolean)\n        .handleAction(fetchAiringTodayTvAction.request, (state, action) => true)\n        .handleAction([fetchAiringTodayTvAction.failure, fetchAiringTodayTvAction.success], (state, action) => false),\n    data: createReducer([] as TvListObject[])\n        .handleAction(fetchAiringTodayTvAction.success, (state, action) => action.payload)\n});\n\nexport default reducer;\n","import { createAsyncAction } from 'typesafe-actions';\nimport {AxiosResponse} from \"axios\";\nimport {ApiError} from \"../../shared/api/models\";\nimport {MovieListObject} from \"./models\";\n\nexport const fetchNowPlayingMoviesAction = createAsyncAction(\n    `[Now Playing Movies] Request`,\n    `[Now Playing Movies] Request Success`,\n    `[Now Playing Movies] Request Failure`\n)<undefined, MovieListObject[], AxiosResponse<ApiError>>();\n\nexport const fetchTopRatedMoviesAction = createAsyncAction(\n    `[Top Rated Movies] Request`,\n    `[Top Rated Movies] Request Success`,\n    `[Top Rated Movies] Request Failure`\n)<undefined, MovieListObject[], AxiosResponse<ApiError>>();\n\nexport const fetchUpcomingMoviesAction = createAsyncAction(\n    `[Upcoming Movies] Request`,\n    `[Upcoming Movies] Request Success`,\n    `[Upcoming Movies] Request Failure`\n)<undefined, MovieListObject[], AxiosResponse<ApiError>>();\n\nexport const fetchPopularMoviesAction = createAsyncAction(\n    `[Popular Movies] Request`,\n    `[Popular Movies] Request Success`,\n    `[Popular Movies] Request Failure`\n)<undefined, MovieListObject[], AxiosResponse<ApiError>>();\n\n\nexport type FetchMoviesType = typeof fetchUpcomingMoviesAction\n    | typeof fetchTopRatedMoviesAction | typeof fetchNowPlayingMoviesAction | typeof fetchPopularMoviesAction;\n","\nimport {combineReducers} from \"redux\";\nimport {createReducer} from \"typesafe-actions\";\nimport {MovieListObject} from \"../models\";\nimport {fetchPopularMoviesAction} from \"../actions\";\n\nconst reducer = combineReducers({\n    isLoading: createReducer(false as boolean)\n        .handleAction(fetchPopularMoviesAction.request, (state, action) => true)\n        .handleAction([fetchPopularMoviesAction.failure, fetchPopularMoviesAction.success], (state, action) => false),\n    data: createReducer([] as MovieListObject[])\n        .handleAction(fetchPopularMoviesAction.success, (state, action) => action.payload)\n});\n\nexport default reducer;\n","\nimport {combineReducers} from \"redux\";\nimport {createReducer} from \"typesafe-actions\";\nimport {MovieListObject} from \"../models\";\nimport {fetchTopRatedMoviesAction} from \"../actions\";\n\nconst reducer = combineReducers({\n    isLoading: createReducer(false as boolean)\n        .handleAction(fetchTopRatedMoviesAction.request, (state, action) => true)\n        .handleAction([fetchTopRatedMoviesAction.failure, fetchTopRatedMoviesAction.success], (state, action) => false),\n    data: createReducer([] as MovieListObject[])\n        .handleAction(fetchTopRatedMoviesAction.success, (state, action) => action.payload)\n});\n\nexport default reducer;\n","\nimport {combineReducers} from \"redux\";\nimport {createReducer} from \"typesafe-actions\";\nimport {MovieListObject} from \"../models\";\nimport {fetchNowPlayingMoviesAction} from \"../actions\";\n\nconst reducer = combineReducers({\n    isLoading: createReducer(false as boolean)\n        .handleAction(fetchNowPlayingMoviesAction.request, (state, action) => true)\n        .handleAction([fetchNowPlayingMoviesAction.failure, fetchNowPlayingMoviesAction.success], (state, action) => false),\n    data: createReducer([] as MovieListObject[])\n        .handleAction(fetchNowPlayingMoviesAction.success, (state, action) => action.payload)\n});\n\nexport default reducer;\n","\nimport {combineReducers} from \"redux\";\nimport {createReducer} from \"typesafe-actions\";\nimport {MovieListObject} from \"../models\";\nimport {fetchUpcomingMoviesAction} from \"../actions\";\n\nconst reducer = combineReducers({\n    isLoading: createReducer(false as boolean)\n        .handleAction(fetchUpcomingMoviesAction.request, (state, action) => true)\n        .handleAction([fetchUpcomingMoviesAction.failure, fetchUpcomingMoviesAction.success], (state, action) => false),\n    data: createReducer([] as MovieListObject[])\n        .handleAction(fetchUpcomingMoviesAction.success, (state, action) => action.payload)\n});\n\nexport default reducer;\n","import { createAsyncAction } from 'typesafe-actions';\n\nimport {AxiosResponse} from \"axios\";\nimport {ApiError} from \"../../shared/api/models\";\nimport {Configuration} from \"./models\";\n\nexport const fetchConfigurationAction = createAsyncAction(\n    '[Configuration] Request',\n    '[Configuration] Request Success',\n    '[Configuration] Request Failure'\n)<undefined, Configuration, AxiosResponse<ApiError>>();\n","import {fetchConfigurationAction} from './actions'\nimport {combineReducers} from \"redux\";\nimport {createReducer} from \"typesafe-actions\";\nimport {Configuration} from \"./models\";\n\nconst reducer = combineReducers({\n    isLoading: createReducer(false as boolean)\n        .handleAction(fetchConfigurationAction.request, (state, action) => true)\n        .handleAction([fetchConfigurationAction.failure, fetchConfigurationAction.success], (state, action) => false),\n    data: createReducer({} as Configuration)\n        .handleAction(fetchConfigurationAction.success, (state, action) => action.payload)\n});\n\nexport default reducer;\n","import { createAsyncAction } from 'typesafe-actions';\nimport {AxiosResponse} from \"axios\";\n\nimport {Genre} from \"./models\";\nimport {ApiError} from \"../../shared/api/models\";\n\nexport const fetchTvGenresAction = createAsyncAction(\n    '[TV Genres] Request',\n    '[TV Genres] Request Success',\n    '[TV Genres] Request Failure'\n)<undefined, Genre[], AxiosResponse<ApiError>>();\n\nexport const fetchMovieGenresAction = createAsyncAction(\n    '[Movie Genres] Request',\n    '[Movie Genres] Request Success',\n    '[Movie Genres] Request Failure'\n)<undefined, Genre[], AxiosResponse<ApiError>>();\n","import {merge, keys, keyBy} from 'lodash'\n\nexport interface EntityState<T> {\n    byId: {[id: number]: T},\n    allIds: number[]\n}\n\nexport const convertToEntityState = <T>(state: EntityState<T>, newData: T[], key:string ='id'):EntityState<T> => {\n    const newDataById = keyBy(newData, key)\n    const mergedById = merge(state.byId, newDataById)\n    return {\n        byId: mergedById,\n        allIds: keys(mergedById).map(i => parseInt(i, 10))\n    }\n}\nexport const getDefaults = () => {\n    return {byId: {}, allIds: []}\n}\n","import {fetchMovieGenresAction, fetchTvGenresAction} from './actions'\nimport {combineReducers} from \"redux\";\nimport {createReducer} from \"typesafe-actions\";\nimport {convertToEntityState, EntityState, getDefaults} from \"../../store/helpers\";\nimport {Genre} from \"./models\";\n\nconst tvReducer = combineReducers({\n    isTvLoading: createReducer(false as boolean)\n        .handleAction(fetchTvGenresAction.request, (state, action) => true)\n        .handleAction([fetchTvGenresAction.failure, fetchTvGenresAction.success], (state, action) => false),\n    isMoviesLoading: createReducer(false as boolean)\n        .handleAction(fetchMovieGenresAction.request, (state, action) => true)\n        .handleAction([fetchMovieGenresAction.failure, fetchMovieGenresAction.success], (state, action) => false),\n    data: combineReducers({\n        tv: createReducer(getDefaults() as EntityState<Genre>).handleAction(fetchTvGenresAction.success, (state, action) => {\n            return convertToEntityState<Genre>(state, action.payload)\n        }),\n        movies: createReducer(getDefaults() as EntityState<Genre>).handleAction(fetchTvGenresAction.success, (state, action) => {\n            return convertToEntityState<Genre>(state, action.payload)\n        }),\n    })\n});\n\nexport default tvReducer;\n","import { combineReducers } from 'redux';\nimport { connectRouter } from 'connected-react-router';\nimport { History } from 'history';\n\nimport tvTop from '../features/tv/tv-top/reducer';\nimport tvPopular from '../features/tv/tv-popular/reducer';\nimport tvAiring from '../features/tv/tv-on-air/reducer';\nimport tvOnAir from '../features/tv/tv-airing/reducer';\n\nimport moviesPopular from '../features/movie/movie-popular/reducer';\nimport moviesTopRated from '../features/movie/movie-top-rated/reducer';\nimport moviesNowPlaying from '../features/movie/movie-now-playing/reducer';\nimport moviesUpcoming from '../features/movie/movie-upcoming/reducer';\n\nimport configuration from '../features/configuration/reducer';\nimport genres from '../features/genres/reducer';\nimport {TvListType} from \"../features/tv/models\";\nimport {MovieListType} from \"../features/movie/models\";\n\nconst rootReducer = (history: History<any>) => {\n    return combineReducers({\n        router: connectRouter(history),\n        configuration,\n        tv: combineReducers({\n            [TvListType.TOP_RATED]: tvTop,\n            [TvListType.POPULAR]: tvPopular,\n            [TvListType.ON_THE_AIR]: tvOnAir,\n            [TvListType.AIRING_TODAY]: tvAiring,\n        }),\n        movies: combineReducers({\n            [MovieListType.POPULAR]: moviesPopular,\n            [MovieListType.TOP_RATED]: moviesTopRated,\n            [MovieListType.UPCOMING]: moviesUpcoming,\n            [MovieListType.NOW_PLAYING]: moviesNowPlaying,\n        }),\n        genres,\n    })\n};\n\nexport default rootReducer;\n","// TODO: connect external client logging service here (e.g. Sentry SDK)\n// tslint:disable-next-line:no-console\nexport default { log: console.log };\n","import Axios from 'axios-observable'\n\nconst instance = Axios.create({\n    baseURL: process.env.REACT_APP_API_URL\n});\ninstance.defaults.params = {}\ninstance.defaults.params['api_key'] = process.env.REACT_APP_API_KEY;\nexport default instance;\n","export enum ResourceEndpoint {\n    TV = 'tv',\n    MOVIES = 'movie',\n}\n\nexport enum PosterSizes {\n   SMALL = \"w185\",\n   MEDIUM = \"w342\",\n   LARGE = \"w780\",\n   ORIGINAL = \"original\"\n}\n","\nimport http from \"../../services/http-client\";\nimport {Response} from \"./models\";\nimport {ResourceEndpoint} from \"./enums\";\nimport {Observable} from 'rxjs'\nimport {map} from 'rxjs/operators'\n\nexport function getList<RType, LType> (resourceType: ResourceEndpoint, listType: LType, page: number = 1): Observable<RType[]> {\n    return http.get<Response<RType[]>>(resourceType + '/' + listType, {params: {page}}).pipe(\n        map(result => {\n            return result.data.results;\n        })\n    );\n}\n","import {Observable} from 'rxjs'\nimport {TvListObject, TvListType} from \"../models\";\nimport {getList} from \"../../../shared/api/generic-list-api\";\nimport {ResourceEndpoint} from \"../../../shared/api/enums\";\n\nexport function getTvList (listType: TvListType, page: number = 1) {\n    return getList<TvListObject, TvListType>(ResourceEndpoint.TV, listType, page);\n}\n\nexport function getTopTvShows (page: number = 1): Observable<TvListObject[]> {\n    return getTvList(TvListType.TOP_RATED, page);\n}\n","import {MovieListObject, MovieListType} from \"../models\";\nimport {getList} from \"../../../shared/api/generic-list-api\";\nimport {ResourceEndpoint} from \"../../../shared/api/enums\";\n\nexport function getMovieList (listType: MovieListType, page: number = 1) {\n    return getList<MovieListObject, MovieListType> (ResourceEndpoint.MOVIES, listType, page)\n}\n","import http from '../../services/http-client'\nimport {Observable} from 'rxjs'\nimport {map} from 'rxjs/operators'\nimport {Configuration} from \"./models\";\n\nexport function loadConfiguration (): Observable<Configuration> {\n    return http.get<Configuration>('configuration').pipe(\n        map(result => {\n            return result.data;\n        })\n    );\n}\n","import http from '../../services/http-client'\nimport {Observable} from 'rxjs'\nimport {map} from 'rxjs/operators'\nimport {ResourceEndpoint} from \"../../shared/api/enums\";\nimport {Genre, GenreResponse} from \"./models\";\n\nexport function getGenres (type: ResourceEndpoint, page: number = 1): Observable<Genre[]> {\n    return http.get<GenreResponse>('genre/' + type + '/list', {params: {page}}).pipe(\n        map(result => {\n            return result.data.genres;\n        })\n    );\n}\n","import * as logger from './logger-service';\nimport * as topTv from '../features/tv/tv-list/api'\nimport * as movies from '../features/movie/movie-list/api'\nimport * as configuration from '../features/configuration/api'\nimport * as genres from '../features/genres/api'\n\nexport default {\n  logger,\n  api: {\n    topTv,\n    movies,\n    configuration,\n    genres\n  }\n};\n","import {RootEpic} from 'GlobalTypes';\nimport {isActionOf} from \"typesafe-actions\";\nimport {of} from 'rxjs';\nimport {catchError, filter, map, switchMap} from 'rxjs/operators';\nimport {TvListType} from \"./models\";\nimport {fetchAiringTodayTvAction, fetchOnAirTvAction, fetchPopularTvAction, fetchTopTvAction} from \"./actions\";\n\nconst genericTvEpicFactory = (actionBuilder: {request: any, success: any, failure: any}, type: TvListType) => {\n    const epic: RootEpic = (action$, state$, { api }) => {\n        return action$.pipe(\n            filter(isActionOf(actionBuilder.request)),\n            switchMap(() => {\n                return api.topTv.getTvList(type).pipe(\n                    map(actionBuilder.success),\n                    catchError(error => {\n                        return of(actionBuilder.failure(error.response))\n                    })\n                )}\n            )\n        )\n    }\n    return epic;\n}\n\nexport const topTvEpic: RootEpic = (action$, state$, services) => {\n    return genericTvEpicFactory(fetchTopTvAction, TvListType.TOP_RATED)(action$, state$, services);\n}\n\nexport const popularTvEpic: RootEpic = (action$, state$, services) => {\n    return genericTvEpicFactory(fetchPopularTvAction, TvListType.POPULAR)(action$, state$, services);\n}\n\nexport const onTheAirTvEpic: RootEpic = (action$, state$, services) => {\n    return genericTvEpicFactory(fetchOnAirTvAction, TvListType.ON_THE_AIR)(action$, state$, services);\n}\n\nexport const airingTvEpic: RootEpic = (action$, state$, services) => {\n    return genericTvEpicFactory(fetchAiringTodayTvAction, TvListType.AIRING_TODAY)(action$, state$, services);\n}\n","import {RootEpic} from 'GlobalTypes';\nimport {isActionOf} from \"typesafe-actions\";\nimport {of} from 'rxjs';\nimport {catchError, filter, map, switchMap} from 'rxjs/operators';\nimport {MovieListType} from \"./models\";\n\nimport {\n    fetchPopularMoviesAction,\n    fetchTopRatedMoviesAction,\n    fetchUpcomingMoviesAction,\n    fetchNowPlayingMoviesAction\n} from \"./actions\";\n\nconst genericMovieEpicFactory = (actionBuilder: {request: any, success: any, failure: any}, type: MovieListType) => {\n    const epic: RootEpic = (action$, state$, { api }) => {\n        return action$.pipe(\n            filter(isActionOf(actionBuilder.request)),\n            switchMap(() => {\n                return api.movies.getMovieList(type).pipe(\n                    map(actionBuilder.success),\n                    catchError(error => {\n                        return of(actionBuilder.failure(error.response))\n                    })\n                )}\n            )\n        )\n    }\n    return epic;\n}\n\nexport const popularMoviesEpic: RootEpic = (action$, state$, services) => {\n    return genericMovieEpicFactory(fetchPopularMoviesAction, MovieListType.POPULAR)(action$, state$, services);\n}\n\nexport const topRatedMoviesEpic: RootEpic = (action$, state$, services) => {\n    return genericMovieEpicFactory(fetchTopRatedMoviesAction, MovieListType.TOP_RATED)(action$, state$, services);\n}\n\nexport const nowPlayingMoviesEpic: RootEpic = (action$, state$, services) => {\n    return genericMovieEpicFactory(fetchNowPlayingMoviesAction, MovieListType.NOW_PLAYING)(action$, state$, services);\n}\n\nexport const UpcomingMoviesEpic: RootEpic = (action$, state$, services) => {\n    return genericMovieEpicFactory(fetchUpcomingMoviesAction, MovieListType.UPCOMING)(action$, state$, services);\n}\n","import {fetchConfigurationAction} from \"./actions\";\nimport { RootEpic } from 'GlobalTypes';\nimport {isActionOf} from \"typesafe-actions\";\nimport { of } from 'rxjs';\nimport { filter, switchMap, map, catchError } from 'rxjs/operators';\n\nexport const loadConfigurationEpic: RootEpic = (action$, state$, { api }) => {\n    return action$.pipe(\n        filter(isActionOf(fetchConfigurationAction.request)),\n        switchMap(() => {\n            return api.configuration.loadConfiguration().pipe(\n                map(fetchConfigurationAction.success),\n                catchError(error => {\n                    return of(fetchConfigurationAction.failure(error.response))\n                })\n            )}\n        )\n    )\n}\n","import {fetchMovieGenresAction, fetchTvGenresAction} from \"./actions\";\nimport {RootEpic} from 'GlobalTypes';\nimport {isActionOf} from \"typesafe-actions\";\nimport {of} from 'rxjs';\nimport {catchError, filter, map, switchMap} from 'rxjs/operators';\nimport {ResourceEndpoint} from \"../../shared/api/enums\";\n\nexport const fetchTvGenresEpic: RootEpic = (action$, state$, { api }) => {\n    return action$.pipe(\n        filter(isActionOf(fetchTvGenresAction.request)),\n        switchMap(() => {\n            return api.genres.getGenres(ResourceEndpoint.TV).pipe(\n                map(fetchTvGenresAction.success),\n                catchError(error => {\n                    return of(fetchTvGenresAction.failure(error.response))\n                })\n            )}\n        )\n    )\n}\n\nexport const fetchMovieGenresEpic: RootEpic = (action$, state$, { api }) => {\n    return action$.pipe(\n        filter(isActionOf(fetchMovieGenresAction.request)),\n        switchMap(() => {\n            return api.genres.getGenres(ResourceEndpoint.MOVIES).pipe(\n                map(fetchMovieGenresAction.success),\n                catchError(error => {\n                    return of(fetchMovieGenresAction.failure(error.response))\n                })\n            )}\n        )\n    )\n}\n","import { combineEpics } from 'redux-observable';\n\nimport * as tv from '../features/tv/epics';\nimport * as movies from '../features/movie/epics';\nimport * as configuration from '../features/configuration/epics';\nimport * as genres from '../features/genres/epics';\n\nexport default combineEpics(\n    ...Object.values(configuration),\n    ...Object.values(genres),\n    ...Object.values(tv),\n    ...Object.values(movies),\n);\n","import {applyMiddleware, createStore} from \"redux\";\nimport {composeWithDevTools} from 'redux-devtools-extension';\nimport { routerMiddleware } from 'connected-react-router';\nimport {createBrowserHistory} from \"history\";\nimport rootReducer from './root-reducer';\nimport services from '../services';\nimport {createEpicMiddleware} from \"redux-observable\";\nimport { RootAction, RootState, Services } from 'GlobalTypes';\nimport rootEpic from './root-epic';\n\nexport const epicMiddleware = createEpicMiddleware<\n  RootAction,\n  RootAction,\n  RootState,\n  Services\n  >({\n  dependencies: services,\n});\n\nexport const history = createBrowserHistory();\nconst middlewares = [routerMiddleware(history), epicMiddleware];\nconst enhancer = composeWithDevTools(applyMiddleware(...middlewares));\n\nconst initialState = {};\n\n// create store\nconst store = createStore(\n  rootReducer(history),\n  initialState,\n  enhancer\n);\n\nepicMiddleware.run(rootEpic);\n\nexport default store;\n","const pathsMap = {\n  home: () => '/',\n  tvShows: () => `/tv`,\n  movies: () => `/movies`,\n  tvShowDetail: (tvShowId: string) => `/tv/${tvShowId}`,\n  movieDetail: (movieId: string) => `/movies/${movieId}`,\n};\ntype PathsMap = typeof pathsMap;\n\nexport const getPath = <TRoute extends keyof PathsMap>(\n  route: TRoute,\n  ...params: Parameters<PathsMap[TRoute]>\n) => {\n  const pathCb: (...args: any[]) => string = pathsMap[route];\n\n  return pathCb(...params);\n};\n","import React, {FC} from 'react';\n\nimport './Main.scss';\nimport {Navbar, Alignment, Button} from \"@blueprintjs/core\";\nimport {Link} from \"react-router-dom\";\nimport {getPath} from \"../router-paths\";\n\nconst Main: FC = ({ children }) =>  {\n    return (\n        <div className=\"main-layout\">\n            <div className=\"header\">\n                <Navbar className=\"bp3-dark\">\n                    <Navbar.Group align={Alignment.LEFT} >\n                        <Navbar.Heading>Tv & Movies</Navbar.Heading>\n                        <Navbar.Divider />\n                        <Link style={{textDecoration: 'none', color: \"inherit\"}} to={getPath('home')}>\n                            <Button className=\"bp3-minimal\" icon=\"home\" text=\"Home\" />\n                        </Link>\n                        <Link style={{textDecoration: 'none', color: \"inherit\"}} to={getPath('tvShows')}>\n                            <Button className=\"bp3-minimal\" icon=\"video\" text=\"Tv Shows\" />\n                        </Link>\n                        <Link style={{textDecoration: 'none', color: \"inherit\"}} to={getPath('movies')}>\n                            <Button className=\"bp3-minimal\" icon=\"film\" text=\"Movies\" />\n                        </Link>\n                    </Navbar.Group>\n                </Navbar>\n            </div>\n            <div className=\"body\">\n                {children}\n            </div>\n        </div>\n    )\n};\n\nexport default Main;\n","import React from 'react';\nimport MainLayout from '../layouts/Main';\nimport {Button} from \"@blueprintjs/core\";\nimport {Link} from \"react-router-dom\";\nimport {getPath} from \"../router-paths\";\n\nexport default () => {\n\n    return (\n        <MainLayout>\n            <div style={{textAlign: \"center\", display: \"flex\", flexDirection: \"column\", justifyContent: \"space-around\", height: '50vh'}}>\n\n                <div>\n                    <div>\n                        <h1>Movies and TV Shows Database</h1>\n                        <h4 style={{color: '#4262b0'}}>A project to practice using React Hooks, Redux, Redux-Observables and React with Typescript</h4>\n                    </div>\n                    <div style={{textAlign:\"center\", marginBottom: 20}}>\n                        <Link style={{textDecoration: 'none', color: \"inherit\"}} to={getPath('movies')}>\n                            <Button intent={\"success\"} style={{marginRight: 10}}>Browse Movies</Button>\n                        </Link>\n                        <Link style={{textDecoration: 'none', color: \"inherit\"}} to={getPath('tvShows')}>\n                            <Button intent={\"primary\"}>Browse TV Shows</Button>\n                        </Link>\n                    </div>\n\n                </div>\n                <div>\n                    <a href={'https://github.com/elnelsonperez/tv-series'}>\n                        <i style={{color: '#5e6367'}} className={'fab fa-github fa-4x'} />\n                    </a> <br/>\n                    <small>Source Code</small>\n\n                </div>\n            </div>\n        </MainLayout>\n    );\n}\n\n","import React from \"react\";\nimport {Configuration} from \"../../features/configuration/models\";\n\nexport const ConfigContext = React.createContext<Configuration | null>(null);\n","import * as React from \"react\";\nimport {PosterSizes} from \"../api/enums\";\nimport {HasPosterPath} from \"../models\";\n\ntype Props = {\n    baseUrl: string;\n    entityWithPoster: HasPosterPath;\n    size?: PosterSizes\n}\n\nconst PosterImage: React.FC<Props> = (props) => {\n    const size = props.size ? props.size : PosterSizes.SMALL;\n\n    if (props.entityWithPoster.poster_path) {\n        return (\n            <img src={props.baseUrl+size+'/'+props.entityWithPoster.poster_path} alt={'Poster'}/>\n        )\n    }\n    return <div>\n        <h4>No Poster</h4>\n    </div>\n}\n\nexport default PosterImage;\nexport {PosterImage}\n","import {useSelector} from \"react-redux\";\nimport {RootState} from 'GlobalTypes'\n\nexport function useStoreSelector<TSelected>(\n    selector: (state: RootState) => TSelected,\n    equalityFn?: (left: TSelected, right: TSelected) => boolean\n): TSelected {\n   return useSelector<RootState, TSelected>(selector, equalityFn);\n}\n","import * as React from \"react\";\nimport {Genre} from \"../../../features/genres/models\";\n\nimport styles from './GenreList.module.scss'\nimport {Boundary, OverflowList, Popover, PopoverInteractionKind, Tag} from \"@blueprintjs/core\";\n\ninterface Props {\n    genres: Genre[]\n}\n\nconst GenreList: React.FC<Props> = (props) => {\n    const {genres} = props;\n\n    return <div className={styles.genres}>\n        <OverflowList items={genres}\n                      collapseFrom={Boundary.END}\n                      visibleItemRenderer={g => <Tag key={g.id} style={{marginRight: 5}}>{g.name}</Tag>}\n                      overflowRenderer={items =>\n                          <Popover interactionKind={PopoverInteractionKind.HOVER}>\n                              <Tag interactive={true}><span style={{fontWeight: 500}}>...</span></Tag>\n                              <div style={{padding: 5, textAlign: 'center'}}>\n                                  {items.map(t => <div key={t.id} style={{marginBottom: 5}}>\n                                      <Tag>\n                                          {t.name}\n                                      </Tag>\n                                  </div>)}\n                              </div>\n                          </Popover>\n                      }\n        />\n    </div>\n}\n\nexport default GenreList;\nexport {GenreList}\n","import * as React from \"react\";\nimport {Card, Elevation} from \"@blueprintjs/core\";\nimport {ConfigContext} from '../../../../shared/hooks/config-context';\nimport {RouteComponentProps, withRouter} from \"react-router\";\nimport {getPath} from \"../../../../router-paths\";\nimport PosterImage from \"../../../../shared/components/PosterImage\";\nimport {PosterSizes} from \"../../../../shared/api/enums\";\nimport styles from './TvShowCard.module.scss'\nimport {useContext} from \"react\";\nimport {useStoreSelector} from \"../../../../shared/hooks/use-store-selector\";\nimport {Genre} from \"../../../genres/models\";\nimport {TvListObject} from \"../../models\";\nimport GenreList from \"../../../../shared/components/genre-list/GenreList\";\n\ntype Props = RouteComponentProps & {\n    tvShow: TvListObject;\n    posterSize: PosterSizes\n}\n\nconst widths: { [key in PosterSizes]?: number } = {\n    [PosterSizes.SMALL]: 240,\n    [PosterSizes.MEDIUM]: 340\n}\n\nconst TvCard: React.FC<Props> = props => {\n    const {tvShow, posterSize} = props\n\n    const handleClick = () => {\n        props.history.push(getPath('tvShowDetail', tvShow.id.toString()))\n    }\n\n    const config = useContext(ConfigContext);\n    const genresById = useStoreSelector(state => state.genres.data.tv.byId);\n\n    let genres: Genre[] = [];\n    if (genresById) {\n        genres = tvShow.genre_ids\n            .map(id => genresById[id] ? genresById[id] : null)\n            .filter(i => i !== null) as Genre[]\n    }\n\n    if (config && config.images) {\n        return <Card elevation={Elevation.TWO}\n              style={{width: widths[posterSize]}} >\n            <div className={styles.cardBody}>\n                <div className={styles.image} onClick={handleClick}>\n                    <PosterImage size={posterSize} entityWithPoster={tvShow} baseUrl={config.images.base_url}/>\n                </div>\n                <div className={styles.title}>\n                    <b>{tvShow.name}</b>\n                </div>\n                <div className={styles.rating}>\n                   <b>{tvShow.vote_average * 10}%</b> &nbsp;\n                    {tvShow.vote_average > 6.5 ?\n                        <i style={{color: '#ff6c00'}} className={'fas fa-star'}/> :\n                        <i style={{color: '#9c1d14'}} className={'fas fa-bomb'}/> }\n                </div>\n                <GenreList genres={genres} />\n            </div>\n        </Card>\n    }\n    return null;\n}\n\nconst TvShowCardWithRouter = withRouter(TvCard);\nexport {TvShowCardWithRouter as TvShowCard}\n","import * as React from \"react\";\nimport {TvShowCard} from \"../../../components/tv-card/TvShowCard\";\nimport styles from './TvListComponent.module.scss'\nimport {PosterSizes} from \"../../../../../shared/api/enums\";\nimport {TvListObject} from \"../../../models\";\n\nexport type TvListProps = {\n    tvList: TvListObject[]\n}\n\nexport const TvListComponent: React.FC<TvListProps> = props => {\n    const tvShowsList = props.tvList.map((tvShow, index) =>\n        <div key={index} className={styles.item}>\n            <TvShowCard posterSize={PosterSizes.SMALL} tvShow={tvShow}/>\n        </div>\n    );\n    return (\n        <div className={styles.wrapper}>\n            {tvShowsList}\n        </div>\n    );\n}\n","import * as React from \"react\";\nimport {useContext, useEffect, useState} from \"react\";\nimport {fetchTvDetails} from \"../api\";\nimport {ConfigContext} from \"../../../../shared/hooks/config-context\";\nimport PosterImage from \"../../../../shared/components/PosterImage\";\nimport {isEmpty} from 'lodash';\nimport {TvDetailObject, TvListObject} from \"../../models\";\nimport {fetchSimilarTv} from \"../../tv-similar/api\";\nimport {TvListComponent} from \"../../tv-list/components/tv-list-component/TvListComponent\";\nimport {finalize, tap} from 'rxjs/operators'\nimport {Spinner} from \"@blueprintjs/core\";\nimport {Animated} from \"react-animated-css\";\nimport {PosterSizes} from \"../../../../shared/api/enums\";\n\ninterface Props {\n    tvShowId: string;\n}\n\nexport const TvShowDetailsComponent: React.FC<Props> = (props) => {\n    const [details, setDetails] = useState<TvDetailObject | null>(null)\n    const [similar, setSimilar] = useState<TvListObject[]>([])\n    const [loadingDetails, setLoadingDetails] = useState(true);\n    const [loadingSimilar, setLoadignSimilar] = useState(true);\n\n    const {tvShowId} = props;\n\n    //Will only run once\n    useEffect(() =>  {\n        fetchTvDetails(tvShowId).pipe(\n            tap(() => setLoadingDetails(true)),\n            finalize(() => setLoadingDetails(false))\n        ).subscribe(setDetails)\n\n        fetchSimilarTv(tvShowId).pipe(\n            tap(() => setLoadignSimilar(true)),\n            finalize(() => setLoadignSimilar(false))\n        ).subscribe(setSimilar)\n    } , [tvShowId])\n\n    const config = useContext(ConfigContext);\n    let detailRender = null;\n\n    if (details && config !== null && !isEmpty(config)) {\n        detailRender = loadingDetails ?  <Spinner intent={\"primary\"} /> : <Animated animationIn={'fadeIn'} animationOut={'fadeOut'} isVisible={!loadingDetails}>\n            <div>\n                <h3>{details.name}</h3>\n                <PosterImage entityWithPoster={details} baseUrl={config.images.base_url} size={PosterSizes.MEDIUM}/>\n                <p>{details.overview}</p>\n                <h3>Seasons</h3>\n                <div style={{display: \"flex\"}}>\n                    {\n                        details.seasons.map(season => {\n                            return <div style={{display: \"inline-block\", marginRight: '15px'}} key={season.id}><h4>{season.name}</h4>\n                                <PosterImage baseUrl={config.images.base_url} entityWithPoster={season}/>\n                            </div>\n                        })\n                    }\n                </div>\n            </div>\n            </Animated>\n    }\n\n    return (\n        <div>\n            {detailRender}\n            {\n                loadingSimilar ?\n                    <Spinner intent={\"primary\"} />\n                    :\n                    <Animated animationIn={'fadeIn'} animationOut={'fadeOut'} isVisible={!loadingSimilar}>\n                        <h3>Similar TV Shows</h3>\n                        <TvListComponent tvList={similar.slice(0,7)} />\n                    </Animated>\n            }\n        </div>\n    );\n\n}\n\n\n","import http from '../../../services/http-client'\nimport {Observable} from 'rxjs'\nimport {map} from 'rxjs/operators'\nimport {TvDetailObject} from \"../models\";\n\nexport function fetchTvDetails (id: string): Observable<TvDetailObject> {\n    return http.get<TvDetailObject>('tv/' + id ).pipe(\n        map(result => {\n            return result.data;\n        })\n    );\n}\n","import http from '../../../services/http-client'\nimport {Observable} from 'rxjs'\nimport {map} from 'rxjs/operators'\nimport {TvListObject} from \"../models\";\nimport {Response} from \"../../../shared/api/models\";\n\nexport function fetchSimilarTv (tvId: string, page: number = 1): Observable<TvListObject[]> {\n    return http.get<Response<TvListObject[]>>('tv/' + tvId + '/similar', {params: {page}}).pipe(\n        map(result => {\n            return result.data.results;\n        })\n    );\n}\n","import React from 'react';\nimport Main from '../layouts/Main';\nimport {TvShowDetailsComponent} from \"../features/tv/tv-details/components/TvShowDetailComponent\";\nimport {match} from \"react-router\";\n\nimport 'animate.css/animate.css'\n\ninterface Props {\n    match: match<{tvShowId: string}>\n}\n const TvDetail: React.FC<Props> = (props) => (\n    <Main>\n        <h1>Tv Show Details</h1>\n        <TvShowDetailsComponent tvShowId={props.match.params.tvShowId} />\n    </Main>\n);\n\nexport default TvDetail;\n","import * as React from \"react\";\nimport {useContext, useEffect, useState} from \"react\";\nimport {fetchMovieDetails} from \"../api\";\nimport {ConfigContext} from \"../../../../shared/hooks/config-context\";\nimport PosterImage from \"../../../../shared/components/PosterImage\";\nimport {isEmpty} from 'lodash';\nimport {MovieDetailObject} from \"../../models\";\nimport {finalize, tap} from 'rxjs/operators'\nimport {Spinner} from \"@blueprintjs/core\";\nimport {Animated} from \"react-animated-css\";\nimport {PosterSizes} from \"../../../../shared/api/enums\";\n\ninterface Props {\n    movieId: string;\n}\n\nexport const MovieDetailComponent: React.FC<Props> = (props) => {\n    const [details, setDetails] = useState<MovieDetailObject | null>(null)\n    const [loadingDetails, setLoadingDetails] = useState(true);\n\n    const {movieId} = props;\n\n    //Will only run once\n    useEffect(() =>  {\n        fetchMovieDetails(movieId).pipe(\n            tap(() => setLoadingDetails(true)),\n            finalize(() => setLoadingDetails(false))\n        ).subscribe(setDetails)\n    } , [movieId])\n\n    const config = useContext(ConfigContext);\n    let detailRender = null;\n\n    if (details && config !== null && !isEmpty(config)) {\n        detailRender = loadingDetails ?  <Spinner intent={\"primary\"} /> : <Animated animationIn={'fadeIn'} animationOut={'fadeOut'} isVisible={!loadingDetails}>\n            <div>\n                <h3>{details.title}</h3>\n                <PosterImage entityWithPoster={details} baseUrl={config.images.base_url} size={PosterSizes.MEDIUM}/>\n                <p>{details.overview}</p>\n                <b>Budget:</b> {details.budget} <br/>\n                <b>Revenue:</b>  {details.revenue}\n            </div>\n            </Animated>\n    }\n\n    return (\n        <div>\n            {detailRender}\n        </div>\n    );\n\n}\n\n\n","import http from '../../../services/http-client'\nimport {Observable} from 'rxjs'\nimport {map} from 'rxjs/operators'\nimport {MovieDetailObject} from \"../models\";\n\nexport function fetchMovieDetails (id: string): Observable<MovieDetailObject> {\n    return http.get<MovieDetailObject>('movie/' + id ).pipe(\n        map(result => {\n            return result.data;\n        })\n    );\n}\n","import React from 'react';\nimport Main from '../layouts/Main';\nimport {match} from \"react-router\";\n\nimport 'animate.css/animate.css'\nimport {MovieDetailComponent} from \"../features/movie/movie-details/components/MovieDetailComponent\";\n\ninterface Props {\n    match: match<{movieId: string}>\n}\n const MovieDetail: React.FC<Props> = (props) => (\n    <Main>\n        <h1>Movie Details</h1>\n        <MovieDetailComponent movieId={props.match.params.movieId} />\n    </Main>\n);\n\nexport default MovieDetail;\n","import * as React from \"react\";\n\nimport {RootState} from 'GlobalTypes'\n\nimport {useEffect} from \"react\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {isEmpty} from \"lodash\";\nimport {Spinner} from '@blueprintjs/core'\nimport {TvListObject, TvListType} from \"../models\";\nimport {TvListComponent} from \"../tv-list/components/tv-list-component/TvListComponent\";\nimport {FetchTvType} from \"../actions\";\n\ninterface Props {\n    tvActions: FetchTvType,\n    tvListType: TvListType,\n    quantity?: number;\n}\n\nconst GenericConnectedTvList: React.FC<Props> = (props) => {\n    const {quantity, tvListType} = props;\n    const loading = useSelector<RootState, boolean>((state: any) => state.tv[tvListType].isLoading)\n    const tvList = useSelector<RootState, TvListObject[]>((state: any) => state.tv[tvListType].data.slice(0,quantity ? quantity : 7))\n    const dispatch = useDispatch()\n\n    //Equivalent to componentDidMount\n    useEffect(() => {\n        if (isEmpty(tvList))\n            dispatch(props.tvActions.request())\n        // eslint-disable-next-line\n    }, [])\n\n    return (\n        loading ? <Spinner intent={\"primary\"} /> : <TvListComponent tvList={tvList} />\n    )\n}\n\nexport {GenericConnectedTvList}\nexport default GenericConnectedTvList;\n","import {Observable} from 'rxjs'\nimport {useEffect, useState} from \"react\";\n\nexport function useObsRender<T>(obs: Observable<T>, defaultVal: T) {\n    const [value, setValue] = useState<T>(defaultVal)\n    useEffect(() => {\n        const subscription = obs.subscribe(setValue)\n        return () => {\n            subscription.unsubscribe();\n        }\n    }, [obs])\n    return value;\n}\n","import * as React from \"react\";\nimport {PropsWithChildren, ChangeEvent, useRef} from \"react\";\nimport {Observable, of} from 'rxjs';\nimport {debounceTime, switchMap, map, publishReplay, refCount} from 'rxjs/operators';\nimport {InputGroup} from \"@blueprintjs/core\";\nimport {getSearchResults} from \"../api\";\nimport {ResourceEndpoint} from \"../../../shared/api/enums\";\nimport {useObsRender} from \"../../../shared/hooks/use-obs-render\";\nimport {useEventAsObs} from \"../../../shared/hooks/use-event-as-observable\";\n\ninterface Props<V> {\n    children: (state: V[]) => React.ReactNode,\n    endpoint: ResourceEndpoint,\n}\n\nconst GenericSearchComponent = <ResourceType extends {}>(props: PropsWithChildren<Props<ResourceType>>) => {\n\n    const [searchTextCallback, searchTextObs$] = useEventAsObs<string>('');\n\n    const list$: Observable<ResourceType[]> = useRef(searchTextObs$.pipe(\n        debounceTime(300),\n        switchMap(text => {\n            if (text !== \"\") {\n                return getSearchResults<ResourceType>(text, props.endpoint);\n            }\n            return of([])\n        }),\n        publishReplay(1),\n        refCount()\n    )).current;\n\n    const count = useObsRender(list$.pipe(\n        map(l => l.length)\n    ), 0)\n\n    return (\n        <div className='search-wrapper'>\n            <InputGroup leftIcon={'search'} placeholder='Type here to search' onInput={(e: ChangeEvent<HTMLInputElement>) => searchTextCallback(e.target.value)} />\n            {count > 0 && <div style={{marginTop: 10, marginBottom: 10}}>\n                {count} Results\n            </div>}\n            {props.children(useObsRender(list$, []))}\n        </div>\n    )\n}\n\nexport default GenericSearchComponent\nexport {GenericSearchComponent};\n","import {Observable, BehaviorSubject} from 'rxjs'\nimport {useRef} from \"react\";\n\nexport function useEventAsObs<T>(initialValue: T): [(v: T) => void, Observable<T>] {\n\n    const emitterRef = useRef(new BehaviorSubject<T>(initialValue));\n    const obsRef = useRef(emitterRef.current.asObservable());\n\n    const callback = useRef((value : T) => {\n        emitterRef.current.next(value)\n    })\n\n    return [callback.current, obsRef.current]\n\n}\n","import http from '../../services/http-client'\nimport {Observable} from 'rxjs'\nimport {map} from 'rxjs/operators'\nimport {ResourceEndpoint} from \"../../shared/api/enums\";\nimport {SearchResult} from \"./types\";\n\nexport function getSearchResults<T> (query: string, type: ResourceEndpoint, page: number = 1): Observable<T[]> {\n    return http.get<SearchResult<T>>('/search/' + type, {params: {query, page}}).pipe(\n        map(result => {\n            return result.data.results;\n        })\n    );\n}\n","import * as React from \"react\";\nimport {GenericSearchComponent} from \"./GenericSearchComponent\";\n\nimport {ResourceEndpoint} from \"../../../shared/api/enums\";\nimport {TvListComponent} from \"../../tv/tv-list/components/tv-list-component/TvListComponent\";\nimport {TvListObject} from \"../../tv/models\";\n\nconst TvSearchCompontent: React.FC = (props) => {\n    return (\n        <GenericSearchComponent<TvListObject> endpoint={ResourceEndpoint.TV}>\n            { (tvList) => <TvListComponent tvList={tvList} /> }\n        </GenericSearchComponent>\n    );\n}\n\nexport default TvSearchCompontent;\nexport {TvSearchCompontent};\n","import React from 'react';\nimport MainLayout from '../layouts/Main';\nimport {GenericConnectedTvList} from \"../features/tv/components/GenericConnectedTvList\";\nimport {TvSearchCompontent} from \"../features/search/components/TvSearchComponent\";\nimport {\n    fetchAiringTodayTvAction,\n    fetchOnAirTvAction,\n    fetchPopularTvAction,\n    fetchTopTvAction\n} from \"../features/tv/actions\";\nimport {TvListType} from \"../features/tv/models\";\n\nexport default () => {\n\n    return (\n        <MainLayout>\n            <h1>Search TV Series</h1>\n            <TvSearchCompontent/>\n            <h1>Top TV</h1>\n            <GenericConnectedTvList tvActions={fetchTopTvAction} tvListType={TvListType.TOP_RATED} />\n            <h1>Popular TV</h1>\n            <GenericConnectedTvList tvActions={fetchPopularTvAction} tvListType={TvListType.POPULAR}/>\n            <h1>On Air TV</h1>\n            <GenericConnectedTvList tvActions={fetchOnAirTvAction} tvListType={TvListType.ON_THE_AIR}/>\n            <h1>Airing Today TV</h1>\n            <GenericConnectedTvList tvActions={fetchAiringTodayTvAction} tvListType={TvListType.AIRING_TODAY}/>\n        </MainLayout>\n    );\n}\n\n","import * as React from \"react\";\nimport {Card, Elevation} from \"@blueprintjs/core\";\nimport {ConfigContext} from '../../../../shared/hooks/config-context';\nimport {RouteComponentProps, withRouter} from \"react-router\";\nimport {getPath} from \"../../../../router-paths\";\nimport PosterImage from \"../../../../shared/components/PosterImage\";\nimport {PosterSizes} from \"../../../../shared/api/enums\";\nimport styles from './MovieCard.module.scss'\nimport {useContext} from \"react\";\nimport {useStoreSelector} from \"../../../../shared/hooks/use-store-selector\";\nimport {Genre} from \"../../../genres/models\";\nimport GenreList from \"../../../../shared/components/genre-list/GenreList\";\nimport {MovieListObject} from \"../../models\";\n\ntype Props = RouteComponentProps & {\n    movie: MovieListObject;\n    posterSize: PosterSizes\n}\n\nconst widths: { [key in PosterSizes]?: number } = {\n    [PosterSizes.SMALL]: 240,\n    [PosterSizes.MEDIUM]: 340\n}\n\nconst MovieCard: React.FC<Props> = props => {\n    const {movie, posterSize} = props\n\n    const handleClick = () => {\n        props.history.push(getPath('movieDetail', movie.id.toString()))\n    }\n\n    const config = useContext(ConfigContext);\n    const genresById = useStoreSelector(state => state.genres.data.tv.byId);\n\n    let genres: Genre[] = [];\n    if (genresById) {\n        genres = movie.genre_ids\n            .map(id => genresById[id] ? genresById[id] : null)\n            .filter(i => i !== null) as Genre[]\n    }\n\n    if (config && config.images) {\n        return <Card elevation={Elevation.TWO}\n              style={{width: widths[posterSize]}} >\n            <div className={styles.cardBody}>\n                <div className={styles.image} onClick={handleClick}>\n                    <PosterImage size={posterSize} entityWithPoster={movie} baseUrl={config.images.base_url}/>\n                </div>\n                <div className={styles.title}>\n                    <b>{movie.title}</b>\n                </div>\n                <div className={styles.rating}>\n                   <b>{movie.vote_average * 10}%</b> &nbsp;\n                    {movie.vote_average > 6.5 ?\n                        <i style={{color: '#ff6c00'}} className={'fas fa-star'}/> :\n                        <i style={{color: '#9c1d14'}} className={'fas fa-bomb'}/> }\n                </div>\n                <GenreList genres={genres} />\n            </div>\n        </Card>\n    }\n    return null;\n}\n\nconst MovieCardWithRouter = withRouter(MovieCard);\nexport {MovieCardWithRouter as MovieCard}\n","import * as React from \"react\";\nimport {MovieCard} from \"../../../components/movie-card/MovieCard\";\nimport styles from './MovieListComponent.module.scss'\nimport {PosterSizes} from \"../../../../../shared/api/enums\";\nimport {MovieListObject} from \"../../../models\";\n\nexport type TvListProps = {\n    movieList: MovieListObject[]\n}\n\nexport const MovieListComponent: React.FC<TvListProps> = props => {\n    const movieList = props.movieList.map((movie, index) =>\n        <div key={index} className={styles.item}>\n            <MovieCard posterSize={PosterSizes.SMALL} movie={movie}/>\n        </div>\n    );\n    return (\n        <div className={styles.wrapper}>\n            {movieList}\n        </div>\n    );\n}\n","import * as React from \"react\";\nimport {GenericSearchComponent} from \"./GenericSearchComponent\";\n\nimport {ResourceEndpoint} from \"../../../shared/api/enums\";\nimport {MovieListObject} from \"../../movie/models\";\nimport {MovieListComponent} from \"../../movie/movie-list/components/movies-list-component/MovieListComponent\";\n\nconst MovieSearchComponent: React.FC = (props) => {\n    return (\n        <GenericSearchComponent<MovieListObject> endpoint={ResourceEndpoint.MOVIES}>\n            { (movieList) => <MovieListComponent movieList={movieList} /> }\n        </GenericSearchComponent>\n    );\n}\n\nexport default MovieSearchComponent;\nexport {MovieSearchComponent};\n","import * as React from \"react\";\nimport {RootState} from 'GlobalTypes'\n\nimport {useEffect} from \"react\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {isEmpty} from \"lodash\";\nimport {Spinner} from '@blueprintjs/core'\n\nimport {FetchMoviesType} from \"../actions\";\nimport {MovieListObject, MovieListType} from \"../models\";\nimport {MovieListComponent} from \"../movie-list/components/movies-list-component/MovieListComponent\";\n\ninterface Props {\n    movieActions: FetchMoviesType,\n    movieListType: MovieListType,\n    quantity?: number;\n}\n\nconst GenericConnectedMovieList: React.FC<Props> = (props) => {\n    const {quantity, movieListType} = props;\n    const loading = useSelector<RootState, boolean>((state: any) => state.movies[movieListType].isLoading)\n    const movieList = useSelector<RootState, MovieListObject[]>((state: any) => state.movies[movieListType].data.slice(0,quantity ? quantity : 7))\n    const dispatch = useDispatch()\n\n    //Equivalent to componentDidMount\n    useEffect(() => {\n        if (isEmpty(movieList))\n            dispatch(props.movieActions.request())\n        // eslint-disable-next-line\n    }, [])\n\n    return (\n        loading ? <Spinner intent={\"primary\"} /> : <MovieListComponent movieList={movieList} />\n    )\n}\n\nexport {GenericConnectedMovieList}\nexport default GenericConnectedMovieList;\n","import React from 'react';\nimport MainLayout from '../layouts/Main';\n\nimport {\n    fetchPopularMoviesAction,\n    fetchNowPlayingMoviesAction,\n    fetchUpcomingMoviesAction,\n    fetchTopRatedMoviesAction,\n} from \"../features/movie/actions\";\n\nimport {MovieListType} from \"../features/movie/models\";\nimport MovieSearchComponent from \"../features/search/components/MovieSearchComponent\";\nimport GenericConnectedMovieList from \"../features/movie/components/GenericConnectedMovieList\";\n\nexport default () => {\n    return (\n        <MainLayout>\n            <h1>Search Movies</h1>\n            <MovieSearchComponent/>\n            <h1>Top Rated Movies</h1>\n            <GenericConnectedMovieList movieActions={fetchTopRatedMoviesAction} movieListType={MovieListType.TOP_RATED} />\n            <h1>Popular Movies</h1>\n            <GenericConnectedMovieList movieActions={fetchPopularMoviesAction} movieListType={MovieListType.POPULAR} />\n            <h1>Now Playing Movies</h1>\n            <GenericConnectedMovieList movieActions={fetchNowPlayingMoviesAction} movieListType={MovieListType.NOW_PLAYING} />\n            <h1>Upcoming Movies</h1>\n            <GenericConnectedMovieList movieActions={fetchUpcomingMoviesAction} movieListType={MovieListType.UPCOMING} />\n        </MainLayout>\n    );\n}\n\n","import React, {useEffect} from 'react';\nimport store, {history} from \"./store\";\nimport { ConnectedRouter } from 'connected-react-router';\nimport { Switch, Route } from 'react-router';\nimport {getPath} from \"./router-paths\";\n\n//Routes\nimport Home from \"./routes/Home\";\nimport TvDetail from \"./routes/TvDetail\";\nimport MovieDetail from \"./routes/MovieDetail\";\n\nimport {Provider, useDispatch} from \"react-redux\";\nimport {ConfigContext} from \"./shared/hooks/config-context\";\nimport {useStoreSelector} from \"./shared/hooks/use-store-selector\";\nimport {fetchConfigurationAction} from \"./features/configuration/actions\";\nimport {fetchMovieGenresAction, fetchTvGenresAction} from \"./features/genres/actions\";\nimport {Configuration} from \"./features/configuration/models\";\n\nimport '@fortawesome/fontawesome-free/css/all.css'\n\nimport TvShows from \"./routes/TvShows\";\nimport Movies from \"./routes/Movies\";\n\nconst AppWithConfig = () => {\n\n    const dispatch = useDispatch()\n    useEffect(() => {\n        //Every component needs this\n        dispatch(fetchConfigurationAction.request())\n        dispatch(fetchTvGenresAction.request())\n        dispatch(fetchMovieGenresAction.request())\n    }, [dispatch])\n\n    const configuration = useStoreSelector<Configuration>(state => state.configuration.data)\n    return (\n        <ConfigContext.Provider value={configuration}>\n            <Route exact path={getPath('home')} render={Home} />\n            <Route exact path={getPath('tvShows')} render={TvShows} />\n            <Route exact path={getPath('movies')} render={Movies} />\n            <Route exact\n                   path={getPath('tvShowDetail', ':tvShowId')}\n                   render={props => <TvDetail {...props}/>} />\n                   <Route exact\n                   path={getPath('movieDetail', ':movieId')}\n                   render={props => <MovieDetail {...props}/>} />\n        </ConfigContext.Provider>\n    )\n}\n\nconst App: React.FC = () => {\n    return (\n        <Provider store={store}>\n            <ConnectedRouter history={history}>\n                <Switch>\n                    <AppWithConfig/>\n                </Switch>\n            </ConnectedRouter>\n        </Provider>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));","// extracted by mini-css-extract-plugin\nmodule.exports = {\"cardBody\":\"TvShowCard_cardBody__3CTF8\",\"title\":\"TvShowCard_title__2Cdd2\",\"genres\":\"TvShowCard_genres__3fIZ_\",\"rating\":\"TvShowCard_rating__1CKsS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"cardBody\":\"MovieCard_cardBody__f-ocH\",\"title\":\"MovieCard_title__19_DN\",\"genres\":\"MovieCard_genres__1zmbJ\",\"rating\":\"MovieCard_rating__28Q25\"};"],"sourceRoot":""}